diff --git a/dist/index.js b/dist/index.js
index 9ce2b6de7ad467f0853ee12676eb26d092908b3f..0277eff5686c7a315610d3c19073a20843a760be 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1,13 +1,13 @@
+import MagicString from "magic-string";
+import assert$1 from "node:assert";
 import assert from "node:assert/strict";
+import { createHash } from "node:crypto";
 import fs from "node:fs";
 import path from "node:path";
 import { fileURLToPath } from "node:url";
-import MagicString from "magic-string";
 import { toNodeHandler } from "srvx/node";
 import { stripLiteral } from "strip-literal";
 import { isCSSRequest, isRunnableDevEnvironment, normalizePath } from "vite";
-import assert$1 from "node:assert";
-import { createHash } from "node:crypto";
 
 //#region src/plugins/shared.ts
 function parseIdQuery(id) {
@@ -331,10 +331,9 @@ function assetsPlugin(pluginOpts) {
 						fs.writeFileSync(path.join(outDir, BUILD_ASSETS_MANIFEST_NAME), `export default ${JSON.stringify(manifest, null, 2)};`);
 						const clientOutDir = builder.environments["client"].config.build.outDir;
 						for (const asset of Object.values(bundleMap[environmentName])) if (asset.type === "asset") {
-							const srcFile = path.join(outDir, asset.fileName);
 							const destFile = path.join(clientOutDir, asset.fileName);
 							fs.mkdirSync(path.dirname(destFile), { recursive: true });
-							fs.copyFileSync(srcFile, destFile);
+              fs.writeFileSync(destFile, asset.source);
 						}
 					}
 				}
